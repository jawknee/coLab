#!/usr/bin/env python
"""
	Rebuild the links, side bar, and anything else
	needing routine maintenance.

	We're (currently) passed the name of a group and 
	rebuild the content found there.
"""

import os
import sys
import clutils
import cldate

import clclasses
from htmlgen import *

# 
# put these somewhere....
num_recent_entries = 10


def rebuild(group, opt):
	"""
	Create and populate group object, then create various files
	in the scructure based on that.
	"""
	
	g = clclasses.Group()	# instantiate the group object

	try:
		g.load(group)
	except IOError, info:
		raise IOError

	#
	# At this point, we should have a populated group object, which includes
	# the group specific items as well as a list of pages 
	# (and eventually, probably projects and songs)
	#
	
	for s in g.pagelist:
		print s.name

	print "----------"
	# sort pages by update time... oldest to newest
	
	g.pagelist.sort(key=updatekey)

	"""
	Build the most recent list, typically included on the left sidebar...
	"""

	recent = os.path.join(g.home, 'Shared', 'mostrecent.html')
	try:
		f_recent = open(recent, 'w+')
	except IOError as info:
		print "Error opening file:", recent, info

	# a quick header...
	f_recent.write("""<!--
		Shared "most-recent" list generated by """ + sys.argv[0] + \
		" on " + cldate.now() + """
		-->
		<div class="sidebar_l">
		<h4>Recent Updates</h4>
		<ul>
		""")

	index = len(g.pagelist)	
	if num_recent_entries < index:
		index = -num_recent_entries - 1
	else:
		index = -index	

	pageURLbase = os.path.join(g.root, 'Page')
	for pg in g.pagelist[index:]:
		print "times:", pg.create, pg.update

		flag = '<span style="font-size: smaller;'	# first part
		if pg.update == pg.create:
			flag = flag + ' color: red;"> New!'
		else:
			flag = flag + '"> (u)'
		flag = flag + '</span>'

		localURL = os.path.join(pageURLbase, pg.name)
		f_recent.write('<li><a href="' + localURL + '/" title="' + pg.fun_title +
			'">' + pg.desc_title + '</a>' + 
			flag +
			'<br><i>' + cldate.utc2short(pg.update) + 
			'</i></li>\n')

		print pg.name, '-', cldate.utc2short(pg.update), flag

	f_recent.write('</ul></div>\n')
	f_recent.close()

	print "----------"
	#  sort pages by creation date - old to new...
	g.pagelist.sort(key=createkey)

	pagedir = os.path.join(g.coLab_home, 'Page')

	# step through the pages in creation order, rebuilding link files and, 
	# as needed, index.shtml (data file change)
	for pg in g.pagelist:
		
		print pg.name
		# 
		# and rebuild the html in that case...
		try:
			os.chdir(pg.home)
		except:
			print "problem changing to", thispage
			continue

		try:
			htime = os.path.getmtime('index.shtml')
		except:
			htime = 0	# force a rebuild

		try:
			dtime = os.path.getmtime('data')
		except:
			#
			# Depending on 
			print ("Trouble getting mtime on data time...skipping")
			continue

		if htime < dtime or opt == 'All':
			if opt == 'All':
				print "Option All - regenerating all"
			else:
				print "File data is newer, need to regenerate the index.shtml file"

			htmlgen(g, pg)
		else:
			print "No need to regenerate."

	#
	# Generate the links from the list..
	linkgen(g)	# build links for the group...

	homegen(g)
	
	newgen(g)

	navgen(g)

	archivegen(g)

		
	sys.exit(0)


def main():
	# Name of the group...
	try:
		group = sys.argv[1]
	except IndexError, info:
		print "usage: use correctly:", info
		sys.exit(1)

	# optional option parm
	try:	
		opt = sys.argv[2]
	except:
		opt = 'none'

	rebuild(group, opt)

if __name__ == '__main__':
	main()
