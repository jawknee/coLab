diff --git a/Code/clFunctions.py b/Code/clFunctions.py
index 9cc38e1..3debd24 100644
--- a/Code/clFunctions.py
+++ b/Code/clFunctions.py
@@ -472,6 +472,86 @@ class Song_menu_row(Menu_row):
 		self.parent.part_obj.post()
 		self.parent.read()
 		
+# a dictionary of menu options, short name mapped to longer name
+# longer name can contain replaceble string, e.g.  !type! 
+OPT_MENU_DICT = { 'Load': 'Load a new !type! file...', 
+ 				  'Reuse': 'Reuse a previous/existing !type! file...',
+				  'UseSound': 'Use the Sound Graphic (above)',
+				  'Adjust': 'Adjust start and end...'
+				}
+		
+class Graphic_row(Data_row):
+       """
+       Post a row with a title and a graphic...
+       and something to let us deal with it ("Change" button?)
+       """
+       def __init__(self, parent, text, member, graphic_path):
+	       Data_row.__init__(self, parent, text, member)
+ 
+	       self.graphic_path = graphic_path
+	       
+	       self.handler = self.button_handler	       #  ?????	 probably not any more...
+	       
+	       #self.parent.row += 1	       # this one takes up 2 rows, one more than most
+	       
+       def post(self):
+	       """
+	       put the text and graphic on the screen...
+	       
+	       also post the "button")
+	       """
+	       
+	       print "Graphic post"
+	       if self.label is None:
+	       # write the base label...
+		       self.frame = self.parent.edit_frame
+		       self.label = tk.Label(self.frame, text=self.text+":", justify=tk.RIGHT)
+		       self.label.grid(row=self.row,column=self.column, sticky=tk.E)
+
+		       self.gOpt = tk.StringVar()
+		       
+		       #self.changeButton = ttk.Button(self.parent.edit_frame, text="Change " + self.text, command=self.button_handler).grid(column=self.column + 2, row=self.row + 1, sticky=tk.
+		       
+		       self.statusVar = tk.StringVar()
+		       self.status = tk.Label(self.parent.edit_frame, textvariable=self.statusVar)
+		       self.status.grid(row=self.row, column=self.column + 1)
+		       
+	
+	       else:
+		       try:
+			       self.graph_el.graphic.destroy()
+		       except:
+			       print "Graphic_el.graphic.destroy failed."
+			       pass
+	       
+	       self.graph_el = cltkutils.graphic_element(self.frame)
+	       self.graph_el.filepath = self.graphic_path
+	       self.graph_el.row = self.row
+	       self.graph_el.column = self.column + 2
+	       self.graph_el.columnspan = 3
+	       self.graph_el.sticky = tk.W
+	       self.graph_el.post()    
+	       
+	       if self.new:
+		       self.set_status(None)
+		       self.new = False
+	       else:
+		       self.set_status(True)
+       
+       def set(self, value):
+	       self.value = value
+	       self.new = False
+	       self.set_status(ok=True)
+	       self.post()
+       
+
+			       
+       def button_handler(self):
+	       print "this is the button handler"
+		       
+       def return_value(self):
+	       return("SomeScreenSht"), self.ok
+      
 class Graphic_menu_row(Menu_row):
 	"""
 	Based on the menu class, so we can easily use the handler callback,
@@ -497,6 +577,18 @@ class Graphic_menu_row(Menu_row):
 		
 		also post the menu...
 		"""
+		# Build a list (and translation dict) from the menuitem list...
+		l = []
+		d = dict()
+
+		for menuitem in self.menulist:
+			title = OPT_MENU_DICT[menuitem].replace("!type!", self.type)
+			l.append(title)
+			d[title] = menuitem
+			
+		self.titles = tuple(l)
+		self.dict = d
+
 		self.post_menu()	# short cut to just the menu...
 		self.statusVar.set('!!')
 		print "Graphic post"
@@ -523,8 +615,18 @@ class Graphic_menu_row(Menu_row):
 	def return_value(self):
 		return("SomeScreenSht"), self.ok
 
+	def load(self):
+		print "Time to Load"
+	def adjust(self):
+		print "Time to adjust"
+	def reuse(self):
+		print "Time to reuse"
+	def usesound(self):
+		print "Use the sound file.."
+		
 class Graphic_menu_row_soundfile(Graphic_menu_row):
 	def post(self):
+		self.type = 'Sound'	# I know, init - but here: it's one line
 		# is there such a file?
 		#self.widget = cltkutils.graphic_element(self.frame)
 		page = self.parent.obj
@@ -532,218 +634,137 @@ class Graphic_menu_row_soundfile(Graphic_menu_row):
 		if not os.path.isfile(self.graphic_path):		# we need a backup file...
 			self.graphic_path = os.path.join(page.coLab_home, 'Resources', 'coLab-NoPageSound_tn.png')
 		
-		self.titles = ("Load a sound file...", "Load a previous/existing file...", "Pat self on back (don't hurt yourself)" )
+		self.menulist = [ 'Load', 'Reuse']
 		self.default = "Change Sound File"
 		
 		Graphic_menu_row.post(self)
+	def handle_menu(self, menustring):
 
-class Graphic_menu_row_screenshot(Graphic_menu_row):
-	def post(self):
-		# is there such a file?
-		#self.widget = cltkutils.graphic_element(self.frame)
-		page = self.parent.obj
-		self.graphic_path = os.path.join(page.home, page.thumbnail)
-		if not os.path.isfile(self.graphic_path):		# we need a backup file...
-			self.graphic_path = os.path.join(page.coLab_home, 'Resources', 'coLab-NoPageImage_tn.png')
-		
-		self.titles = ("Use the Sound Graphic", "Adjust start and end", "Load a new graphic file...", "Reuse a previous/existing file..." )
-		self.default = "Change Graphic"
-		
-		Graphic_menu_row.post(self)
-		
-class Graphic_row(Data_row):
-	"""
-	Post a row with a title and a graphic...
-	and something to let us deal with it ("Change" button?)
-	"""
-	def __init__(self, parent, text, member, graphic_path):
-		Data_row.__init__(self, parent, text, member)
+		action = self.dict[menustring]
+		print "Soundfile menu handler", action
+		if action is 'Load':
+			self.load()
+		elif action is 'Reuse':
+			self.reuse()
+		else:
+			print "Time to relax - or panic s", action
 
-		self.graphic_path = graphic_path
-		
-		self.handler = self.button_handler		#  ?????  probably not any more...
-		
-		#self.parent.row += 1		# this one takes up 2 rows, one more than most
-		
-	def post(self):
-		"""
-		put the text and graphic on the screen...
-		
-		also post the "button")
-		"""
+	def load(self):
+	
+		print "this is the sound file loader"
+		page = self.parent.obj
+		page.changed = True
+		page.needs_rebuild = True	
+		self.initialPath = "/Volumes/iMac 2TB/Music/"
+		self.filetypes = [ ('AIFF', '*.aif')]
+		# We need to keep the latest file path...
+		self.initialfile = page.soundfile
 		
-		print "Graphic post"
-		if self.label is None:
-		# write the base label...
-			self.frame = self.parent.edit_frame
-			self.label = tk.Label(self.frame, text=self.text+":", justify=tk.RIGHT)
-			self.label.grid(row=self.row,column=self.column, sticky=tk.E)
+		self.file_load()
 
-			self.gOpt = tk.StringVar()
-			
-			#self.changeButton = ttk.Button(self.parent.edit_frame, text="Change " + self.text, command=self.button_handler).grid(column=self.column + 2, row=self.row + 1, sticky=tk.W )
-			
-			self.statusVar = tk.StringVar()
-			self.status = tk.Label(self.parent.edit_frame, textvariable=self.statusVar)
-			self.status.grid(row=self.row, column=self.column + 1)
-			
-        
-		else:
-			try:
-				self.graph_el.graphic.destroy()
-			except:
-				print "Graphic_el.graphic.destroy failed."
-				pass
-		
-		self.graph_el = cltkutils.graphic_element(self.frame)
-		self.graph_el.filepath = self.graphic_path
-		self.graph_el.row = self.row
-		self.graph_el.column = self.column + 2
-		self.graph_el.columnspan = 3
-		self.graph_el.sticky = tk.W
-		self.graph_el.post()	
+	def reuse(self):
+		print "this is the sound file reloader"
+		page = self.parent.obj
+		page.changed = True
+		page.needs_rebuild = True	
+		self.initialPath = os.path.join(page.home, "coLab_local")
+		self.filetypes = [ ('AIFF', '*.aif')]
+		self.initialfile = os.path.join(self.initialPath, page.soundfile )
+		self.initialfile = page.soundfile 
+		print"reuse: initial file:", self.initialfile
 		
-		if self.new:
-			self.set_status(None)
-			self.new = False
-		else:
-			self.set_status(True)
-	
-	def set(self, value):
-		self.value = value
-		self.new = False
-		self.set_status(ok=True)
-		self.post()
-	
+		self.file_load()
 
-				
-	def button_handler(self):
-		print "this is the button handler"
-			
-	def return_value(self):
-		return("SomeScreenSht"), self.ok
-	
class Graphic_row_screenshot(Graphic_row):
	"""
	Derived class - a button handler specific to the screenshot
	"""
	def button_handler(self):
		print "this is the button handler"
		page = self.parent.obj
		initialPath = "/Users/Johnny/Desktop"
		filetypes = [ ('PNG', '*.png'), ('JPEG', '*.jpg')]
		initialfile="ScreenShot.png"
		file_path = tkFileDialog.askopenfilename(initialdir=initialPath, defaultextension='.png', title="Open screen shot...", filetypes=filetypes, initialfile=initialfile)
+	def file_load(self):
+		file_path = tkFileDialog.askopenfilename(initialdir=self.initialPath, defaultextension='.aif', title="Open AIFF sound file...", filetypes=self.filetypes, initialfile=self.initialfile)
 		if not file_path:
 			return
-
-		#try:
-		image = Image.open(file_path)
-		img_width, img_height = image.size
-		page.xStart = int(img_width * 0.05)	# a decent guess at a starting point
-		page.xEnd = img_width - page.xStart
-		#except:
-		#	print "Failure opening image file:", file_path
-		#	return
 		
-		page.changed = True
-		page.needs_rebuild = True
-
+		
 		self.ok = True
 		self.set_status( True)
-		page.use_soundgraphic = False
 		filename = os.path.split(file_path)[1]
+		popup = cltkutils.Popup("Sound file:" + filename, "Copying...")
+		page = self.parent.obj
 		
-		subdir = os.path.join('coLab_local', filename)
-		page.screenshot = subdir
-		dest = os.path.join(page.home, subdir)
+		filepath = os.path.join('coLab_local', filename)
+		
+		page.soundfile = filepath
+		sound_dest = os.path.join(page.home, filepath)
 						
 		try:
-			shutil.copy(file_path, dest)
+			shutil.copy(file_path, sound_dest)
 		except Exception as e:
-			print "Failure copying", file_path, "to", dest
+			print "Failure copying", file_path, "to", sound_dest
 			raise Exception
-		#self.graphic_path = dest
		#
		# use "open" to schedule preview - seems to do what we need....
		try:
			open = '/usr/bin/open'		
			subprocess.call([open, '-W', '-a', 'Preview.app',  dest])
		except Exception as e:
			print "Ooops - Exception", e, sys.exc_info()[0]
			sys.exit(1)
			
		#message = 'Please crop the graphic and save in place.'
		#tkMessageBox.showinfo("Crop IT!", message, parent=self.parent.edit_frame, icon=tkMessageBox.ERROR)
		finally:
			popup.destroy()
+		
+		page.duration = clAudio.get_audio_len(sound_dest)
+		self.parent.set_member('duration', str(page.duration))
+		#self.parent.duration_obj.nameVar.set(self.parent.obj.duration)
+		
+		#page_thread=threading.Thread(target=rebuild.render_page, args=(page, media_size='Tiny', max_samples_per_pixel=100))
+		self.size_save = page.media_size
+		page.media_size = 'Tiny'	# for now - probably will define a "Preview" size
+		
+		"""  KLUDGE ALERT!!--------------------------------------------------------------"""
+		#self.parent.res_obj.ok = True
+		#self.parent.res_obj.set_status(True)
+		
+		# Set up a few vars to only generate the sound graphic..
+		use_save = page.use_soundgraphic
+		page.use_soundgraphic = True
+		page.needs_rebuild = False
 		# 
		# Let's create the poster size and thumbnails
		imagemaker.make_sub_images(page)
		#self.post()
		
		if tkMessageBox.askyesno('Select Limits',"Do you need to set the left and right limits?", icon=tkMessageBox.QUESTION):
			# Now - post the display sized object to let us enter the xStart, xEnd
			image_file = os.path.join(page.home, page.graphic)
			"""
			#image = Image.open(image_file)
			#image.show()
			try:
				open = '/usr/bin/open'	
				subprocess.call([open, '-W', '-a', 'Preview.app', image_file])
			except Exception as e:
				print "Problem opening the image for limits", e, sys.exc_info()[0]
				sys.exit(1)
			#"""
			graph_edit = clGraphEdit.GraphEdit(page, dest)
			graph_edit.post()
			#page.xStart = graph_edit.start_x
			#page.xEnd = graph_edit.end_x
			self.parent.set_member('xStart', graph_edit.start_x)
			self.parent.set_member('xEnd', graph_edit.end_x)
			
			print "xStart, xEnd", self.parent.get_member('xStart'), self.parent.get_member('xEnd')
			#self.parent.post_member('xStart')
			#self.parent.post_member('xEnd')
			self.parent.refresh()
			
		#self.parent.post_member('screenshot')
		self.graphic_path = os.path.join(self.parent.obj.home, self.parent.obj.thumbnail)
		self.post()
			
-	def return_value(self):
-		return(self.parent.obj.screenshot, self.ok)	# I know, a bit redundant...
-	
-	def sound_button(self):
-		"""
-		Put up a second button to allow using the sound graphic.
-		"""
-		self.changeButton = ttk.Button(self.parent.edit_frame, text="Use Sound Graphic", command=self.button2_handler).grid(column=self.column + 3, row=self.row + 1, sticky=tk.W )
-	def size_menu(self):
-		"""
-		Offer up a menu of sizes...
-		"""
-			
-	def button2_handler(self):
-		"""
-		Just use the sound graphic...
-		"""
-		page = self.parent.obj
-		page.changed = True
+		#page_thread=threading.Thread(target=self.render_and_post, args=(page, 'Tiny', 100))
+		#page_thread.start()
+		
+		rendertop = rebuild.render_page(page, media_size='Tiny', max_samples_per_pixel=100)   # render as a preview...
+		rendertop.destroy()		# yeah, not too keen on this, but destroying the top window in in the routine causes a hang...
+		
+		page.use_soundgraphic = use_save
 		page.needs_rebuild = True
-		page.screenshot = page.soundgraphic	# probably not needed.
-		page.use_soundgraphic = True
-
+		page.changed = True
 		"""
-		self.parent.set_member('xStart', 30)	#   RBF:  these need to be set elsewhere...
-		width, height = self.parent.size
-		end = width - 10
-		self.parent.set_member('xEnd', end)
+		img_dest = os.path.join(self.parent.obj.home, self.parent.obj.soundgraphic)
+		#make_sound_image(self.parent.obj, sound_dest, img_dest)
+		self.graphic_path =  os.path.join(self.parent.obj.home, self.parent.obj.soundthumbnail)
+		max = 100 	# overview -no more than 100 sound frames (samples) per vertical pixel
+		page_thread=threading.Thread(target=make_sound_image, args=(self.parent, sound_dest, img_dest, self.parent.size, max))
+		page_thread.start()
+		#rebuild_page_edit(self)
 		"""

		self.parent.set_member('screenshot', page.soundgraphic)
		imagemaker.make_sub_images(page)
		self.graphic_path =  os.path.join(page.home, page.soundthumbnail)
		self.parent.post_member('screenshot')
 		
+class Graphic_menu_row_screenshot(Graphic_menu_row):
+	def post(self):
+		self.type = 'Graphic'
+		# is there such a file?
+		#self.widget = cltkutils.graphic_element(self.frame)
+		page = self.parent.obj
+		self.graphic_path = os.path.join(page.home, page.thumbnail)
+		if not os.path.isfile(self.graphic_path):		# we need a backup file...
+			self.graphic_path = os.path.join(page.coLab_home, 'Resources', 'coLab-NoPageImage_tn.png')
+		self.menulist = [ 'UseSound', 'Load', 'Reuse', 'Adjust']
+		
+		self.default = "Change Graphic"
+		
+		Graphic_menu_row.post(self)
+	def handle_menu(self, menustring):
+		action = self.dict[menustring]
+		print "Graphic file menu handler", action
+		if action is 'Load':
+			self.load()
+		elif action is 'Reuse':
+			self.reuse()
+		elif action is 'Adjust':
+			self.adjust()
+		elif action is 'UseSound':
+			self.usesound
+		else:
+			print "Time to relax - or panic g", action
+
+'''
 class Graphic_row_soundfile(Graphic_row):
 	"""
 	Derived class - a button handler specific to the soundfile
@@ -828,7 +849,7 @@ class Graphic_row_soundfile(Graphic_row):
 		
 	def return_value(self):
 		return(self.parent.obj.soundfile, self.ok)	# I know, a bit redundant...
-	
+#'''	
 
 class Select_edit():
 	"""
@@ -1112,17 +1133,6 @@ class Page_edit_screen(Edit_screen):
 		#---- Sound file...
 		# (new version, menu based)
 		row = Graphic_menu_row_soundfile(self, "Soundfile", 'soundfile')
-		row.post()
-
-		#---- Sound file...
-		# (previous version - button based)
-		# 
-		# is there such a file?
-		soundgraphic_path = os.path.join(self.obj.home, self.obj.soundthumbnail)
-		if not os.path.isfile(soundgraphic_path):		# we need a backup file...
-			soundgraphic_path = os.path.join(self.obj.coLab_home, 'Resources', 'coLab-NoPageSound_tn.png')
-			
-		row = Graphic_row_soundfile(self, "Soundfile", 'soundfile', soundgraphic_path)
 		self.editlist[row.member] =  row
 		row.post()
 		
@@ -1137,22 +1147,9 @@ class Page_edit_screen(Edit_screen):
 		#---- Sound file...
 		# (new version, menu based)
 		row = Graphic_menu_row_screenshot(self, "Graphic", 'screenshot')
-		row.post()
-		
-		#---- Screen Shot
-		# (for now, the name - later: the picture (thumbnail)
-		try:	
-			screenshot_path = os.path.join(self.obj.home, self.obj.thumbnail)
-		except:				# in case something's not preset - we'll catch it in the test...
-			pass
-		if not os.path.isfile(screenshot_path):
-			screenshot_path = os.path.join(self.obj.coLab_home, 'Resources', 'coLab-NoPageImage_tn.png')
-			
-		row = Graphic_row_screenshot(self, "Graphic", 'screenshot', screenshot_path)
 		self.editlist[row.member] =  row
 		row.post()
-		row.sound_button()
-		self.obj.graphic_row = row	# we'll want this later....
+		self.obj.graphic_row = row      # we'll want this later....
 		
 		#----  x Start and Stop - eventually done with graphic input...
 		row = Entry_row(self, "xStart", "xStart", width=5)
@@ -1352,7 +1349,10 @@ def edit_page(parent):
 		page = None
 	if page is None:
 		return
-	print "Selected:", page.name
+	print "Selected:", page.name, page.locked
+	#if page.locked:
+	#	parent.master.beep()
+	#	return
 	page.master = parent.master
 	parent.page = Page_edit_screen(parent, page, new=False)
 
